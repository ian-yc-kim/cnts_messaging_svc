"""Factory functions for database table management and test data generation."""

import logging
from typing import Optional
from .base import Base
from .message import Message


def create_all_tables(engine) -> None:
    """Create all database tables using Base metadata.
    
    Args:
        engine: SQLAlchemy engine instance
    """
    try:
        Base.metadata.create_all(engine)
    except Exception as e:
        logging.error(f"Failed to create tables: {e}", exc_info=True)
        raise


def drop_all_tables(engine) -> None:
    """Drop all database tables using Base metadata.
    
    Args:
        engine: SQLAlchemy engine instance
    """
    try:
        Base.metadata.drop_all(engine)
    except Exception as e:
        logging.error(f"Failed to drop tables: {e}", exc_info=True)
        raise


def MessageDataFactory(
    topic_type: str = "test_project",
    topic_id: str = "123",
    message_type: str = "status_update",
    message_id: Optional[int] = None,
    sender_type: str = "user",
    sender_id: str = "test_user",
    content_type: str = "text/plain",
    content: str = "Test message content",
    **kwargs
) -> Message:
    """Create a Message instance for testing purposes.
    
    Args:
        topic_type: Type of topic (default: "test_project")
        topic_id: ID of the topic (default: "123")
        message_type: Type of message (default: "status_update")
        message_id: Optional message ID. If None, will be auto-generated by event listener
        sender_type: Type of sender (default: "user")
        sender_id: ID of the sender (default: "test_user")
        content_type: Content type (default: "text/plain")
        content: Message content (default: "Test message content")
        **kwargs: Additional fields to override (only valid Message attributes)
    
    Returns:
        Message instance ready for database insertion
    """
    # Valid Message model attributes
    valid_attributes = {
        'topic_type', 'topic_id', 'message_type', 'message_id',
        'sender_type', 'sender_id', 'content_type', 'content', 'created_at'
    }
    
    # Create base message data
    message_data = {
        "topic_type": topic_type,
        "topic_id": topic_id,
        "message_type": message_type,
        "message_id": message_id,
        "sender_type": sender_type,
        "sender_id": sender_id,
        "content_type": content_type,
        "content": content,
    }
    
    # Apply only valid overrides from kwargs
    for key, value in kwargs.items():
        if key in valid_attributes:
            message_data[key] = value
        # Invalid attributes are silently ignored
    
    # Filter out None values if message_id is not provided
    if message_data["message_id"] is None:
        del message_data["message_id"]
    
    return Message(**message_data)
