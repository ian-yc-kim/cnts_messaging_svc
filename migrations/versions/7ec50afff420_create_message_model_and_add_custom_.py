"""Create Message model and add custom message_id sequence trigger

Revision ID: 7ec50afff420
Revises: 
Create Date: 2025-09-22 04:10:16.414929

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7ec50afff420'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('messages',
    sa.Column('topic_type', sa.String(length=255), nullable=False),
    sa.Column('topic_id', sa.String(length=255), nullable=False),
    sa.Column('message_type', sa.String(length=255), nullable=False),
    sa.Column('message_id', sa.BigInteger(), nullable=False),
    sa.Column('sender_type', sa.String(length=255), nullable=False),
    sa.Column('sender_id', sa.String(length=255), nullable=False),
    sa.Column('content_type', sa.String(length=255), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.PrimaryKeyConstraint('topic_type', 'topic_id', 'message_type', 'message_id', name='pk_messages')
    )
    # ### end Alembic commands ###
    
    # Check if we're running on PostgreSQL
    bind = op.get_bind()
    if bind.dialect.name == 'postgresql':
        # Create PostgreSQL function for generating message_id
        op.execute(sa.text("""
            CREATE OR REPLACE FUNCTION generate_message_id_for_topic(
                p_topic_type VARCHAR, 
                p_topic_id VARCHAR, 
                p_message_type VARCHAR
            ) RETURNS BIGINT AS $$
            BEGIN
                RETURN COALESCE(
                    (
                        SELECT MAX(message_id) 
                        FROM messages 
                        WHERE topic_type = p_topic_type 
                          AND topic_id = p_topic_id 
                          AND message_type = p_message_type
                    ), 0
                ) + 1;
            END;
            $$ LANGUAGE plpgsql;
        """))
        
        # Create trigger for auto-generating message_id
        op.execute(sa.text("""
            CREATE OR REPLACE FUNCTION trigger_generate_message_id() RETURNS TRIGGER AS $$
            BEGIN
                IF NEW.message_id IS NULL THEN
                    NEW.message_id := generate_message_id_for_topic(
                        NEW.topic_type, 
                        NEW.topic_id, 
                        NEW.message_type
                    );
                END IF;
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        """))
        
        op.execute(sa.text("""
            CREATE TRIGGER trigger_generate_message_id
            BEFORE INSERT ON messages
            FOR EACH ROW
            EXECUTE FUNCTION trigger_generate_message_id();
        """))


def downgrade() -> None:
    # Check if we're running on PostgreSQL
    bind = op.get_bind()
    if bind.dialect.name == 'postgresql':
        # Drop trigger first, then function
        op.execute(sa.text("DROP TRIGGER IF EXISTS trigger_generate_message_id ON messages;"))
        op.execute(sa.text("DROP FUNCTION IF EXISTS trigger_generate_message_id();"))
        op.execute(sa.text("DROP FUNCTION IF EXISTS generate_message_id_for_topic(VARCHAR, VARCHAR, VARCHAR);"))
    
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('messages')
    # ### end Alembic commands ###
